@model  CUSrinagar.Models.AppUsers
@using CUSrinagar.Extensions
@{
    var routeValues = HttpContext.Current.Request.RequestContext.RouteData.Values;
    string actionName = "";
    if (routeValues != null)
    {
        if (routeValues.ContainsKey("controller"))
        {
            actionName = routeValues["action"].ToString();
        }
    }
    bool IsEdit = false;
    if (actionName == "EditEvalvator")
    { IsEdit = true; }

    string currentYear = DateTime.Now.Year + "";

}

@Html.AntiForgeryToken()
@Html.HiddenFor(model => model.College_ID)

@if (!ViewData.ModelState.IsValidField("ErrorMessage"))
{
    <div class="alert alert-danger alert-dismissable">
        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
        <strong>@Html.ValidationMessage("ErrorMessage", "", new { @class = "red " })</strong>
    </div>
}
<div class="col-sm-12">
    @Html.ValidationMessageFor(model => model.College_ID, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

</div>
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.UserName)
    </label>
    <div class="col-sm-6 ">




        @Html.TextBoxFor(model => model.UserName, new { @class = "width-100", @maxlength = "35" })

        Username must be at least 6 characters , only underscore(_) symbol is allowed
        @if (actionName == "EditEvalvator" && !string.IsNullOrEmpty(Model.Password))
        {
            @Model.Password.Decrypt();
        }
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>
@if (IsEdit)
{@Html.HiddenFor(model => model.Password)}
else
{
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span>@Html.LabelFor(model => model.Password)
    </label>
    <div class="col-sm-6 ">
        @Html.PasswordFor(model => model.Password, new { @class = "width-100", @maxlength = "35" })
        Password must be atleast 8 characters,One capital letter,one numeric character and one special character

    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>
}
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.FullName)

    </label>
    <div class="col-sm-6 ">
        @Html.TextBoxFor(model => model.FullName, new { @class = "width-100", @maxlength = "150", @onkeypress = "return forNameOnly(event);" })
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })
    </div>
</div>
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.Email)
    </label>
    <div class="col-sm-6 ">
        @Html.TextBoxFor(model => model.Email, new { @class = "width-100", @maxlength = "150" })
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>

<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.Designation)

    </label>
    <div class="col-sm-6 ">
        @Html.TextBoxFor(model => model.Designation, new { @class = "width-100", @maxlength = "150" })
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>

<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.PhoneNumber)

    </label>
    <div class="col-sm-6 ">
        @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "width-100", @maxlength = "10", @onkeypress = "return numbersOnly(event);" })
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.Evaluator_ID)

    </label>
    <div class="col-sm-6 ">
        @Html.TextBoxFor(model => model.Evaluator_ID, new { @class = "width-100", @maxlength = "25" })
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.Evaluator_ID, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.Institute)

    </label>
    <div class="col-sm-6 ">
        @Html.TextBoxFor(model => model.Institute, new { @class = "width-100 required", @maxlength = "150", required = "required" })
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.Institute, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed " })

    </div>
</div>
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right">
        <span class="red bigger-110">*</span> @Html.LabelFor(model => model.UserRoles)

    </label>
    <div class="col-sm-6 ">
        @{ int i = 0;}
        @foreach (var role in ViewBag.RolesList)
        {
            i++;

            CUSrinagar.Enums.AppRoles roleis = (CUSrinagar.Enums.AppRoles)Enum.ToObject(typeof(CUSrinagar.Enums.AppRoles), Convert.ToInt32(role.Value));
            var classrole = (roleis == CUSrinagar.Enums.AppRoles.College_Principal) ? "collegeRole" : "";
            var ischecked = (Model != null) ? (((Model.UserRoles ?? new List<CUSrinagar.Models.AppUserRoles>()).Where(x => x.RoleID == roleis).Count() > 0) ? "checked" : "") : "";
            <input checked class="@classrole" type="checkbox" value="@role.Value" name="UserRoles_IDs" onclick="return false;" />
            @role.Text
            <br />
        }
    </div>
    <div class="col-sm-2">
        @Html.ValidationMessageFor(model => model.UserRoles, "", new { @class = "label label-sm label-danger arrowed-in-right arrowed" })

    </div>
</div>


<div class="form-group" style="margin:0px !important; ">

    <div class="col-sm-12" style="border:1px solid #c5d0dc;font-size:62% !important">

        @Html.Partial("SubjectSectionEvalvator", Model)
    </div>

</div>
<div class="form-group">
    <label class="col-sm-3 control-label no-padding-right"></label>
    <div class="col-sm-8">
        <br /><br /><br />
        <button type="submit" class="btn btn-sm btn-primary save-button">
            <i class="ace-icon fa fa-check"></i>
            Save
        </button>

        <a id="cData1" href="/CUSrinagarAdminPanel/UserProfile/UserListEvalvator/" class="fm-button ui-state-default ui-corner-all fm-button-icon-left btn btn-sm btn-danger">
            <i class="ace-icon fa fa-times"></i>Cancel
        </a>

    </div>
</div>
















